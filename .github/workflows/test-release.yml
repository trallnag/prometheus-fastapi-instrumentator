name: test-release

# Required secrets:
# - TEST_PYPI_TOKEN (Token for Test PyPI)

on: 
  workflow_dispatch:

jobs:
  test-release:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:

    # ==========================================================================

    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - uses: Gr1N/setup-poetry@v4

    - name: Use cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-

    - run: poetry --version
    - run: poetry install
    - run: bash run.sh test
    - run: bash run.sh lint
    - run: poetry build
    - name: Publish to test.pypi.org
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish -r testpypi -u __token__ -p ${{ secrets.TEST_PYPI_TOKEN }}

    # ==========================================================================

    - name: Retrieve version
      run: |
        x=$(awk '/^version/{print $NF}' pyproject.toml | tr -d '"' | tr -d "'")
        echo "PROJECT_VERSION=$x" >> $GITHUB_ENV
        
    - name: Extract release notes
      id: extract-release-notes
      uses: ffurrer2/extract-release-notes@v1

    - name: Retrieve date
      run: |
        x=$(date +'%Y-%m-%d')
        echo "NOW=$x" >> $GITHUB_ENV
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: test-releases/${{ env.PROJECT_VERSION }}
        release_name: "TEST_RELEASE [${{ env.PROJECT_VERSION }}] ${{ env.NOW }}"
        body: ${{ steps.extract-release-notes.outputs.release_notes }}
        draft: true
        prerelease: false

    # ==========================================================================
